{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport * as AuthSession from 'expo-auth-session';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as SecureStore from 'expo-secure-store';\nimport React from 'react';\nimport { bareer } from \"../components/Token\";\nWebBrowser.maybeCompleteAuthSession();\nvar useProxy = false;\nvar redirectUri = AuthSession.makeRedirectUri({\n  useProxy: useProxy\n});\nexport default function App() {\n  var discovery = {\n    authorizationEndpoint: \"https://auth.kyberna.cz/connect/authorize\",\n    tokenEndpoint: \"https://auth.kyberna.cz/connect/token\"\n  };\n\n  var _AuthSession$useAuthR = AuthSession.useAuthRequest({\n    clientId: 'mvc',\n    clientSecret: 'secret',\n    redirectUri: redirectUri,\n    responseType: AuthSession.ResponseType.Code,\n    usePKCE: true,\n    scopes: ['openid', 'profile', 'roles', 'api.sis.kyberna.cz', 'offline_access']\n  }, discovery),\n      _AuthSession$useAuthR2 = _slicedToArray(_AuthSession$useAuthR, 3),\n      request = _AuthSession$useAuthR2[0],\n      result = _AuthSession$useAuthR2[1],\n      promptAsync = _AuthSession$useAuthR2[2];\n\n  React.useEffect(function () {\n    function getToken() {\n      var _request$codeVerifier, accessToken, tokenResult;\n\n      return _regeneratorRuntime.async(function getToken$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(result && result.type === 'success')) {\n                _context.next = 6;\n                break;\n              }\n\n              accessToken = new AuthSession.AccessTokenRequest({\n                clientId: 'mvc',\n                clientSecret: 'secret',\n                code: result.params.code,\n                redirectUri: redirectUri,\n                scopes: ['openid', 'profile', 'roles', 'api.sis.kyberna.cz'],\n                extraParams: {\n                  'code_verifier': (_request$codeVerifier = request == null ? void 0 : request.codeVerifier) != null ? _request$codeVerifier : \"\"\n                }\n              });\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AuthSession.exchangeCodeAsync(accessToken, {\n                tokenEndpoint: discovery.tokenEndpoint\n              }));\n\n            case 4:\n              tokenResult = _context.sent;\n              SecureStore.setItemAsync(\"kybernaAccessToken\", tokenResult.accessToken);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    getToken();\n  }, [result]);\n  console.log(redirectUri);\n  return React.createElement(LinearGradient, {\n    style: styles.background,\n    colors: ['#E9671E', '#FFA573'],\n    start: {\n      x: 1,\n      y: 0.5\n    },\n    end: {\n      x: 1,\n      y: 1\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: \"center\"\n    }\n  }, React.createElement(Image, {\n    style: {\n      height: 42,\n      width: 156,\n      margin: 20,\n      marginTop: 20\n    },\n    source: require(\"./kyberna1.png\")\n  }), React.createElement(Text, null, bareer), React.createElement(Image, {\n    style: {\n      height: 339,\n      width: 455\n    },\n    source: require(\"./kyberna2.png\")\n  })), React.createElement(View, {\n    style: {\n      alignItems: 'center',\n      paddingTop: 30,\n      marginBottom: \"10%\"\n    }\n  }, LoginButton()));\n\n  function LoginButton() {\n    return React.createElement(TouchableOpacity, {\n      style: {\n        padding: 10,\n        flexDirection: \"row\",\n        backgroundColor: 'white',\n        height: 60,\n        width: '90%',\n        borderRadius: 10,\n        alignItems: \"center\"\n      },\n      onPress: function onPress() {\n        promptAsync({\n          useProxy: useProxy\n        });\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontWeight: '600',\n        margin: 10\n      }\n    }, \"P\\u0159ihla\\u0161 se p\\u0159es Kybernu\"));\n  }\n}\nvar styles = StyleSheet.create({\n  background: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flex: 1\n  },\n  ListText: {\n    alignItems: 'flex-start',\n    color: 'white',\n    fontWeight: '600'\n  }\n});","map":{"version":3,"sources":["C:/Users/strup/OneDrive/Plocha/KybernaSIs/mobilesis/pages/Login.tsx"],"names":["LinearGradient","AuthSession","WebBrowser","SecureStore","React","bareer","maybeCompleteAuthSession","useProxy","redirectUri","makeRedirectUri","App","discovery","authorizationEndpoint","tokenEndpoint","useAuthRequest","clientId","clientSecret","responseType","ResponseType","Code","usePKCE","scopes","request","result","promptAsync","useEffect","getToken","type","accessToken","AccessTokenRequest","code","params","extraParams","codeVerifier","exchangeCodeAsync","tokenResult","setItemAsync","console","log","styles","background","x","y","alignItems","height","width","margin","marginTop","require","paddingTop","marginBottom","LoginButton","padding","flexDirection","backgroundColor","borderRadius","fontWeight","StyleSheet","create","justifyContent","flex","ListText","color"],"mappings":"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","sourcesContent":["import { View,Text,StyleSheet,TouchableOpacity,Image } from \"react-native\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport * as AuthSession from 'expo-auth-session';\nimport * as WebBrowser from 'expo-web-browser';\nimport * as SecureStore from 'expo-secure-store';\nimport React from 'react';\nimport {bareer} from \"../components/Token\"\n\nWebBrowser.maybeCompleteAuthSession();\n\nconst useProxy = false;\n\nconst redirectUri = AuthSession.makeRedirectUri({\n    useProxy,\n});\n\n\n\nexport default function App(){\n\n\n    const discovery = {\n        authorizationEndpoint: \"https://auth.kyberna.cz/connect/authorize\",\n        tokenEndpoint: \"https://auth.kyberna.cz/connect/token\",\n    };\n    \n    \n    const [request, result,promptAsync] = AuthSession.useAuthRequest(\n        {\n        clientId: 'mvc',\n        clientSecret: 'secret',\n        redirectUri,\n        responseType: AuthSession.ResponseType.Code,\n        usePKCE: true,\n        scopes: ['openid', 'profile', 'roles', 'api.sis.kyberna.cz', 'offline_access'],\n        },\n        discovery\n    );\n    \n    React.useEffect(() => {\n        async function getToken() {\n            if (result && result.type === 'success') {\n    \n                var accessToken = new AuthSession.AccessTokenRequest({\n                clientId: 'mvc',\n                clientSecret: 'secret',\n                code: result.params.code,\n                redirectUri,\n                scopes: ['openid', 'profile', 'roles', 'api.sis.kyberna.cz'],\n                extraParams: { 'code_verifier': request?.codeVerifier ?? \"\" },\n    \n            });\n            var tokenResult = await AuthSession.exchangeCodeAsync(accessToken, { tokenEndpoint: discovery.tokenEndpoint })\n    \n            //const token = result.params.access_token;\n            SecureStore.setItemAsync(\"kybernaAccessToken\",tokenResult.accessToken)\n            }\n        }\n    \n        getToken();\n        }\n        , [result])\n    \n\n    console.log(redirectUri);\n\n\n    \n    return(\n    <LinearGradient style={styles.background} colors={['#E9671E', '#FFA573']}start={{ x: 1, y: 0.5 }}end={{ x: 1, y: 1 }}   >\n        <View style={{alignItems:\"center\"}}>\n            <Image style={{height:42,width:156,margin:20,marginTop:20}} source={require(\"./kyberna1.png\")}/>\n            <Text>{bareer}</Text>\n            <Image style={{height:339,width:455}} source={require(\"./kyberna2.png\")}/>\n        </View>\n        <View style={{alignItems:'center',paddingTop:30,marginBottom:\"10%\"}}>{LoginButton()}</View>\n    </LinearGradient>\n    );\n\n    function LoginButton(){\n        return(\n        <TouchableOpacity\n            style={{padding:10,flexDirection:\"row\",backgroundColor:'white',height:60, width:'90%',borderRadius:10,alignItems:\"center\"}}\n            onPress={()=>{promptAsync({ useProxy })}}>\n            {/* <Image style={{height:40,width:48}} source={require(\"./logo.jpg\")}/> */}\n            <Text style={{fontWeight:'600',margin:10}}>Přihlaš se přes Kybernu</Text>\n        </TouchableOpacity>\n        );\n    }\n\n\n\n}\n\n\n\n\nconst styles = StyleSheet.create(\n    {\n        background:{\n            justifyContent: 'center',\n            alignItems: 'center',\n            flex:1,\n        },\n        ListText:{\n            alignItems:'flex-start',\n            color:'white',\n            fontWeight:'600'\n        },\n\n    }\n)"]},"metadata":{},"sourceType":"module"}